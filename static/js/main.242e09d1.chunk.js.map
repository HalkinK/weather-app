{"version":3,"sources":["components/SearchBar.js","components/WeatherInfo.js","components/UserLocation.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","onSubmit","useState","cityName","setCityName","event","preventDefault","trim","alert","type","name","value","onChange","currentTarget","toLowerCase","WeatherInfo","weather","setWeather","useEffect","fetch","then","responce","json","catch","error","document","location","reload","coldStyle","backgroundColor","middleStyle","hotStyle","map","description","icon","main","id","style","Math","round","temp","src","alt","UserLocation","lat","setLat","lon","setLon","console","warn","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.242e09d1.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport default function SearchBar({ onSubmit }) {\n  const [cityName, setCityName] = useState(\"\");\n\n  const handleNameChange = (event) => {\n    setCityName(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (cityName.trim() === \"\") {\n      alert(\"Please enter your city\");\n      return;\n    }\n\n    onSubmit(cityName);\n    setCityName(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"cityName\"\n        value={cityName}\n        onChange={handleNameChange}\n      />\n      <button type=\"submit\">Show weather</button>\n    </form>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\nexport default function WeatherInfo({ cityName }) {\n  const [weather, setWeather] = useState(null);\n\n  useEffect(() => {\n    if (!cityName) {\n      return;\n    }\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=af0f9a3d3acf15b4d50d288abcbabfde&units=metric`\n    )\n      .then((responce) => responce.json())\n      .then((weather) => setWeather(weather))\n      .catch((error) => {\n        alert(\"Please enter valid city name\");\n        document.location.reload();\n      });\n  }, [cityName]);\n\n  const coldStyle = { backgroundColor: \"#00ffff\" };\n  const middleStyle = { backgroundColor: \"#fff700\" };\n  const hotStyle = { backgroundColor: \"#ff8c00\" };\n\n  return (\n    <>\n      {weather && (\n        <>\n          {weather.weather.map(({ description, icon, main, id }) => (\n            <div\n              key={id}\n              style={\n                Math.round(weather.main.temp) < 10\n                  ? coldStyle\n                  : Math.round(weather.main.temp) >= 10 &&\n                    Math.round(weather.main.temp) <= 29\n                  ? middleStyle\n                  : hotStyle\n              }\n            >\n              <h1>{weather.name}</h1>\n              <img\n                src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n                alt={description}\n              ></img>\n              <h2>{Math.round(weather.main.temp)} °C</h2>\n              <p>\n                {main}: {description}\n              </p>\n            </div>\n          ))}\n        </>\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\nexport default function UserLocation() {\n  const [weather, setWeather] = useState(null);\n  const [lat, setLat] = useState(\"\");\n  const [lon, setLon] = useState(\"\");\n\n  const coldStyle = { backgroundColor: \"#00ffff\" };\n  const middleStyle = { backgroundColor: \"#fff700\" };\n  const hotStyle = { backgroundColor: \"#ff8c00\" };\n\n  useEffect(() => {\n    const fetchData = () => {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setLat(position.coords.latitude);\n        setLon(position.coords.longitude);\n      });\n    };\n\n    if (lat && lon) {\n      fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=af0f9a3d3acf15b4d50d288abcbabfde&units=metric`\n      )\n        .then((responce) => responce.json())\n        .then((weather) => setWeather(weather))\n        .catch((error) => console.warn(error));\n    }\n    fetchData();\n  }, [lat, lon]);\n\n  return (\n    <>\n      {weather && (\n        <>\n          {weather.weather.map(({ description, icon, main, id }) => (\n            <div\n              key={id}\n              style={\n                Math.round(weather.main.temp) < 10\n                  ? coldStyle\n                  : Math.round(weather.main.temp) >= 10 &&\n                    Math.round(weather.main.temp) <= 29\n                  ? middleStyle\n                  : hotStyle\n              }\n            >\n              <h1>{weather.name}</h1>\n              <img\n                src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n                alt={description}\n              ></img>\n              <h2>{Math.round(weather.main.temp)} °C</h2>\n              <p>\n                {main}: {description}\n              </p>\n            </div>\n          ))}\n        </>\n      )}\n    </>\n  );\n}\n","// import logo from \"./logo.svg\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\nimport WeatherInfo from \"./components/WeatherInfo\";\nimport UserLocation from \"./components/UserLocation\";\n\nexport default function App() {\n  const [cityName, setCityName] = useState(\"\");\n\n  const handleFormSubmit = (cityName) => {\n    setCityName(cityName);\n  };\n\n  return (\n    <div className=\"weather-container\">\n      <SearchBar onSubmit={handleFormSubmit} />\n      {cityName === \"\" && <UserLocation />}\n\n      <WeatherInfo cityName={cityName} />\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}